<?php

/**
 * @file
 * Provide a field formatter to render values as HTML or comma-separated lists.
 */
 
/**
 * Implements hook_help().
 */
function textformatter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#textformatter' :
      $output =  '<p>' . t("The text formatter module provides a new display formatter that can 
        be used on any text, number, list, or taxonomy fields.") . '</p>'; 
      $output .= '<p>' . t("Go to 'Manage display' for your entity field display settings and 
        select 'List' as the formatter. Various options will then be available to either format 
        your field values as an html list or comma separated list.") . '</p>';
      $output .= '<p>' . t("This would be mostly implemented with multi value fields. 
        E.g. A text field could be created with unlimited values. Each value will then be added to 
        the same html list. Taxonomy terms will work with comma separated auto complete lists too, 
        to give the same result. The only exceptions are textarea field, lists can be created based 
        on each line of the input.") . '</p>';

    return $output;
  }

}

/**
 * Implements hook_field_formatter_info().
 */
function textformatter_field_formatter_info() {
  return array(
    'textformatter_list' => array(
      'label' => t("List"),
      'field types' => array('text', 'text_long', 'number_integer', 'number_decimal', 'number_float', 'list_float', 'list_integer', 'list_text', 'taxonomy_term_reference'),
      'settings' => array(
        'textformatter_type' => 'ul',
        'textformatter_class' => 'textformatter-list',
        'textformatter_comma_full_stop' => 0,
        'textformatter_comma_and' => 0,
        'textformatter_comma_tag' => 'div',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_Settings_form().
 */
function textformatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();

  if ($display['type'] == 'textformatter_list') {
    $form['textformatter_type'] = array(
      '#title' => t("List type"),
      '#type' => 'select',
      '#options' => array(
        'ul' => t("Unordered HTML list (ul)"),
        'ol' => t("Ordered HTML list (ol)"),
        'comma' => t("Comma separated list"),
      ),
      '#default_value' => $settings['textformatter_type'],
      '#required' => TRUE,
    );
    $form['textformatter_comma_and'] = array(
      '#type' => 'checkbox',
      '#title' => t("Include 'and' before the last item"),
      '#default_value' => $settings['textformatter_comma_and'],
      '#states' => array(
        'visible' => array(
          ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][textformatter_type]"]' => array('value' => 'comma'),
        ),
      ),
    );
    $form['textformatter_comma_full_stop'] = array(
      '#type' => 'checkbox',
      '#title' => t("Append comma separated list with '.'"),
      '#default_value' => $settings['textformatter_comma_full_stop'],
      '#states' => array(
        'visible' => array(
          ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][textformatter_type]"]' => array('value' => 'comma'),
        ),
      ),
    );
    $form['textformatter_comma_tag'] = array(
      '#type' => 'select',
      '#title' => t("HTML wrapper"),
      '#description' => t("An HTML tag to wrap the list in. The CSS class below will be added to this tag."),
      '#options' => array(
        t('No HTML tag'),
        'div' => t('Div'),
        'span' => t('Span'),
        'p' => t('Paragraph'),
        'h1' => t('Header 1'),
        'h2' => t('Header 2'),
        'h3' => t('Header 3'),
        'h4' => t('Header 4'),
        'h5' => t('Header 5'),
        'h6' => t('Header 6'),
      ),
      '#default_value' => $settings['textformatter_comma_tag'],
      '#states' => array(
        'visible' => array(
          ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][textformatter_type]"]' => array('value' => 'comma'),
        ),
      ),
    );
    $form['textformatter_class'] = array(
      '#title' => t("List classes"),
      '#type' => 'textfield',
      '#size' => 40,
      '#description' => t("A CSS class to use in the markup for the field list."),
      '#default_value' => $settings['textformatter_class'],
      '#required' => FALSE,
      '#element_validate' => array('_textformatter_validate_class'),
    );
  }

  return $form;
}

/**
 * Validate that a space-separated list of values are lowercase and appropriate
 * for use as HTML classes.
 *
 * @see textformatter_field_formatter_settings_form()
 */
function _textformatter_validate_class($element, &$form_state) {
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  $classes = explode(' ', $value);
  foreach ($classes as $class) {
    if ($class != drupal_html_class($class)) {
      form_error($element, t('List classes contain illegal characters; classes should be lowercase and may contain letters, numbers, and dashes.'));
      return;
    }
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function textformatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'textformatter_list') {
    switch ($settings['textformatter_type']) {
      case 'ul':
        $summary[] = t("Unordered HTML list");
        break;
      case 'ol':
        $summary[] = t("Ordered HTML list");
        break;
      case 'comma':
        $summary[] = t("Comma separated list");
        break;
    }

    if ($settings['textformatter_class']) {
      $summary[] = t("CSS Class") . ': <em>' . check_plain($settings['textformatter_class']) . '</em>';
    }

    $summary = theme('item_list', array('type' => 'ul', 'items' => $summary));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function textformatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  if ($display['type'] == 'textformatter_list') {
    $list_items = array();
    // For long text fields, use each line as a list item, removing empty lines.
    if ($field['type'] == 'text_long') {
      foreach ($items as $delta => $item) {
        $long_text_items = array_filter(array_map('trim', explode("\n", $item['value'])));
        foreach ($long_text_items as $long_text_item) {
          // @see _text_sanitize(), text.module
          $list_items[] = ($instance['settings']['text_processing'] ? check_markup($long_text_item, $item['format'], $langcode) : check_plain($long_text_item));
        }
      }
    }
    elseif ($field['module'] == 'list') {
      $allowed_values = list_allowed_values($field);
      foreach ($items as $delta => $item) {
        if (isset($allowed_values[$item['value']])) {
          $list_items[$delta] = field_filter_xss($allowed_values[$item['value']]);
        }
      }
    }
    elseif ($field['module'] == 'taxonomy') {
      $tids = array();
      foreach ($items as $item) { 
        $tids[] = $item['tid']; 
      }
      $terms = taxonomy_term_load_multiple($tids);

      foreach ($items as $delta => $item) {
        $list_items[$delta] = l($terms[$item['tid']]->name, 'taxonomy/term/' . $item['tid']);
      }
    }
    else {
      foreach ($items as $delta => $item) {
        $list_items[$delta] = check_plain($item['value']);
      }
    }

    // If there are no list items, return and render nothing.
    if (empty($list_items)) {
      return;
    }

    // CSS classes are checked for validity on submission. drupal_attributes()
    // runs each attribute value through check_plain().
    $classes = explode(' ', $settings['textformatter_class']);

    switch ($settings['textformatter_type']) {
      case 'ul':
      case 'ol':
        // Render elements as one piece of markup and theme as item list.
        $element[0] = array(
          '#theme' => 'item_list',
          '#type' => $settings['textformatter_type'],
          '#items' => $list_items,
          '#attributes' => array('class' => $classes),
        );
      break;
      case 'comma':
        // Render as one element as comma separated list.
        $element[0] = array(
          '#theme' => 'textformatter_comma',
          '#items' => $list_items,
          '#full_stop' => $settings['textformatter_comma_full_stop'],
          '#comma_and' => $settings['textformatter_comma_and'],
          '#comma_tag' => $settings['textformatter_comma_tag'],
          '#attributes' => array('class' => $classes),
        );
      break;
    }
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function textformatter_theme($existing, $type, $theme, $path) {
  return array(
    'textformatter_comma' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme function to render comma separated lists.
 */
function theme_textformatter_comma($variables) {
  $items = $variables['element']['#items'];
  $and = $variables['element']['#comma_and'];
  $full_stop = $variables['element']['#full_stop'];
  $tag = $variables['element']['#comma_tag'];

  // Optionally prefix the last item with 'and'.
  $last = '';
  if ($and && count($items) > 1) {
    $last = ' ' . t('and') . ' ' . array_pop($items);
  }

  // Generate a comma-separated list.
  $output = implode(', ', $items) . $last;

  // Optionally follow the list with a '.'.
  if ($full_stop) {
    $output .= '.';
  }

  // Optionally wrap the list in an HTML tag.
  if ($tag) {
    $attributes = drupal_attributes($variables['element']['#attributes']);
    $output = "<$tag$attributes>$output</$tag>";
  }

  return $output;
}
